from Compiler.instructions import writesharestofile, readsharesfromfile
import os
import time

def get_input_mask_share():
    input_mask_share = sint.get_random_triple()[0]
    print_ln('input_mask: %s', input_mask_share.reveal())
    return input_mask_share

def main():
    #input_mask_share = sint.get_random_triple()[0]
    #writesharestofile(input_mask_share)
    #print_ln('input_mask: %s', input_mask_share.reveal())

    #poolETH = sfix(-1.2)
    #poolTOK = sint(2)

    #while True:
        #start = regint(0)
        #end = regint()
        #masked_value = sint()
        #readsharesfromfile(start, end, masked_value)
        #print_ln('end:%s masked_value:%s', end, masked_value.reveal())
        #if cint(end).reveal() == -1:
        #    break
        #if os.path.getsize('Persistence/Transactions-P0.data') > 16:
        #    break
        #time.sleep(1)
    start = regint(16)
    end = regint()
    masked_value = sint()
    readsharesfromfile(start, end, masked_value)
    print_ln('end:%s masked_value:%s', end, masked_value.reveal())


    #while True:
    #    marketPrice = (poolETH / poolTOK).reveal()
    #    print_ln('Current price: %s', marketPrice)

    #    _amtETH = sfix(-2.2)
    #    input_mask_share = get_input_mask_share()
    #    masked = _amtETH + input_mask_share.reveal()
    #    amtETH = masked - input_mask_share
    #    print_ln('amtETH: %s', amtETH.reveal())

    #    amtTOK = poolTOK - poolETH * poolTOK / (poolETH - amtETH)
    #    print_ln('amtTOK: %s', amtTOK.reveal())

    #    actualPrice = sfix(-1) * amtETH / amtTOK
    #    print_ln('actualPrice: %s', actualPrice.reveal())

    #    _minPrice = 1
    #    input_mask_share = get_input_mask_share()
    #    masked = _minPrice + input_mask_share.reveal()
    #    minPrice = masked - input_mask_share
    #    print_ln('minPrice: %s', minPrice.reveal())

    #    buyETH = amtETH > 0
    #    flag = 1 - (1 - buyETH * (actualPrice <= minPrice)) * (1 - (1 - buyETH) * (actualPrice >= minPrice))
    #    poolETH -= amtETH * flag
    #    poolTOK -= amtTOK * flag
    #    print_ln('poolETH: %s', poolETH.reveal())
    #    print_ln('poolTOK: %s', poolTOK.reveal())

     #   break

main()
